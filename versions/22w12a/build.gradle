plugins {
	id 'fabric-loom' version '0.12.54'
	id 'maven-publish'
	id 'de.undercouch.download' version '5.1.0'
}

static def getDate() {
	def date = new Date()
	def formattedDate = date.format('yyMMdd')
	return formattedDate
}

archivesBaseName = project.archives_base_name
version = project.minecraft_version + "-" + project.wurst_version + "-" + getDate()
group = project.maven_group
description = 'builds version ' + version

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// net.wurstclient.ai.PathPos extends net.minecraft.util.math.BlockPos,
	// which uses javax.annotation.concurrent.Immutable, which is part of
	// the JSR305 library.
	//
	// In other words, Wurst won't compile without this library,
	// even though it's Minecraft that actually uses it.
	modImplementation 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"fabric_loader": project.loader_version,
				"fabric_api": project.fabric_version,
				"fabric_minecraft_version": project.minecraft_version,
				"java_version": project.java_version

	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

sourceSets {
	//noinspection GroovyAssignabilityCheck
	main {
		java {
			srcDirs "src"
			srcDirs "../../groups/${project.group_version}"
			srcDirs "../../common/src/main/java"
			srcDirs "../../groups/JAVA_${project.java_version}/src"
		}
		//noinspection GroovyAssignabilityCheck
		resources{
			srcDirs "../../common/src/main/resources"
			srcDirs "../../groups/JAVA_${{project.java_version}}/resources"
		}
	}
}

task getFabricAPI(type: Download) {
	dest "build/libs/"
	src "https://github.com/FabricMC/fabric/releases/download/${{project.fabric_version}}/fabric-api-${{project.fabric_version}}.jar"
	overwrite false
}

task makeReleaseZip(type: Zip) {
	dependsOn("build")
	dependsOn("getFabricAPI")
	from "build/libs/${{project.archives_base_name}}-${{ project.version }}.jar",
			"build/libs/fabric-api-${{project.fabric_version}}.jar",
			"../../common/install_cheddar.sh", "../../common/install_cheddar.bat"
	archiveFileName	 = "${{project.archives_base_name}}-${{ project.version }}.zip"
	destinationDirectory = new File("../../build/")}

task makeDevZip(type: Zip) {
	dependsOn("build")
	dependsOn("getFabricAPI")
	from "build/libs/", "../../common/install_cheddar.sh", "../../common/install_cheddar.bat"
	archiveFileName	 = "${{project.archives_base_name}}-DEV-${{ project.version }}.zip"
	destinationDirectory = new File("../../build/")}


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = Integer.parseInt(project.java_version)
}
